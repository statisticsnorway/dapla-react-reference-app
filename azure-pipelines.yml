name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Hemmeligheter
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageName
    value: 'prod-bip/ssb/dapla/react-reference-app'
    YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

jobs:
  - job: pullRequest
    displayName: 'Build applications and run tests'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    steps:
      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
          path: $(YARN_CACHE_FOLDER)
        displayName: 'Cache Yarn packages'
      - script: |
          yarn install
          CI=true yarn coverage
  - job: mergeToMaster
    displayName: 'Analyze code and build and push Docker image'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
          path: $(YARN_CACHE_FOLDER)
        displayName: 'Cache Yarn packages'
      - script: |
          yarn install
          CI=true yarn build
      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'bipSonarQube'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: '$(SONAR_TOKEN)'
          cliSources: '.'
      - task: SonarQubeAnalyze@4
      - task: Docker@2
        displayName: 'Login to GCR'
        inputs:
          command: login
          containerRegistry: gcrServiceConnection
      - task: Docker@2
        inputs:
          containerRegistry: 'gcrServiceConnection'
          repository: '$(imageName)'
          command: 'buildAndPush'
          Dockerfile: 'Dockerfile'
          tags: '$(Build.SourceBranchName)-imagescan-$(fullSha)'
